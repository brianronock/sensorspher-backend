openapi: 3.0.0
info:
  title: SensoSphere API
  description: |
    API for the SensoSphere platform, handling authentication, sensors, live feed, MQTT, WebSocket communications, and user management. 
    This API is used to manage data from sensors, handle authentication, and provide a real-time feed using WebSockets and MQTT protocols.
  version: 1.0.1
  contact:
    name: Brian Rono
    email: rono.b23@htlwienwest.at
servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Authentication
    description: Operations related to user authentication (Login, Register, and JWT handling).
  - name: Sensors
    description: Operations for reading sensor data and creating new sensor entries.
  - name: Feed
    description: Operations related to live feed posts, including creating, deleting, liking, and updating posts.
  - name: User Management
    description: Manage user profiles, such as retrieving profile information.
  - name: Real-time Communication
    description: Operations related to MQTT and WebSocket for real-time sensor data updates.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
        email:
          type: string
        password:
          type: string
          description: Password is hashed and stored securely
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - password

    Sensor:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the sensor
        type:
          type: string
          description: Type of the sensor (e.g., temperature, humidity)
        value:
          type: number
          description: Value from the sensor
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the sensor reading
      required:
        - type
        - value

    Post:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the post
        content:
          type: string
        user:
          $ref: '#/components/schemas/User'
        likes:
          type: array
          items:
            type: string
          description: Array of users who liked the post
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Bad request, user data is invalid
        '409':
          description: Conflict, user already exists
          
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User successfully logged in
        '400':
          description: Bad request, invalid credentials
        '401':
          description: Unauthorized, invalid password

  /sensors:
    get:
      summary: Get all sensors
      tags:
        - Sensors
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sensors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      summary: Create a new sensor
      tags:
        - Sensors
      security:
        - bearerAuth: []
      requestBody:
        description: Sensor data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        '201':
          description: Sensor created successfully
        '400':
          description: Bad request, invalid sensor data
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /sensors/{id}:
    get:
      summary: Get a specific sensor
      tags:
        - Sensors
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The sensor ID
      responses:
        '200':
          description: A specific sensor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
        '404':
          description: Sensor not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      summary: Update a sensor
      tags:
        - Sensors
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The sensor ID
      requestBody:
        description: Sensor data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        '200':
          description: Sensor updated successfully
        '404':
          description: Sensor not found
        '400':
          description: Invalid data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      summary: Delete a sensor
      tags:
        - Sensors
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The sensor ID
      responses:
        '200':
          description: Sensor deleted successfully
        '404':
          description: Sensor not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /feed:
    get:
      summary: Get all posts from the feed
      tags:
        - Feed
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new post in the feed
      tags:
        - Feed
      security:
        - bearerAuth: []
      requestBody:
        description: Post data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
        '400':
          description: Bad request, invalid post data
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Update a post in the feed
      tags:
        - Feed
      security:
        - bearerAuth: []
      requestBody:
        description: Update post data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
        '400':
          description: Bad request, invalid post data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      summary: Delete a post from the feed
      tags:
        - Feed
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The post ID
      responses:
        '200':
          description: Post deleted successfully
        '404':
          description: Post not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /mqtt:
    post:
      summary: Send data via MQTT
      tags:
        - Real-time Communication
      requestBody:
        description: MQTT message data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  description: The topic to publish to
                message:
                  type: string
                  description: The message to send
      responses:
        '200':
          description: Data sent successfully
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /websocket:
    get:
      summary: Get real-time sensor data via WebSocket
      tags:
        - Real-time Communication
      responses:
        '200':
          description: WebSocket connected for real-time data